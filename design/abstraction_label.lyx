#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble



\newif\ifDraft\Draftfalse
%\Drafttrue


%\usepackage{scrartcl}

\usepackage{fancyhdr}\usepackage{times}\usepackage{amsthm}\usepackage{cite}


\usepackage[final,formats]{listings}

\newcommand{\src}[1]{\texttt{#1}}
\newcommand{\todo}[1]{\textit{\textbf{TODO: #1}}}

\newtheorem{proposition}{Proposition}


\title{Three-Valued Abstraction Refinement for Driver Synthesis}

\author{Leonid Ryzhyk}


\date{\today}
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package none
\inputencoding auto
\fontencoding default
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 11
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_amsmath 2
\use_esint 1
\use_mhchem 0
\use_mathdots 0
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Definitions
\end_layout

\begin_layout Subsection
Games
\end_layout

\begin_layout Standard
A 
\emph on
game structure
\emph default
 
\begin_inset Formula $G=\langle S,L,I,\delta_{c},\delta_{u}\rangle$
\end_inset

 consists of:
\end_layout

\begin_layout Itemize
a state space 
\begin_inset Formula $S$
\end_inset

, 
\end_layout

\begin_layout Itemize
a set of 
\emph on
controllable
\emph default
 labels 
\begin_inset Formula $L$
\end_inset

,
\end_layout

\begin_layout Itemize
a subset of initial states 
\begin_inset Formula $I\subseteq S$
\end_inset

, 
\end_layout

\begin_layout Itemize
a controllable transition relation 
\begin_inset Formula $\delta_{c}:S\times L\rightarrow2^{S}$
\end_inset

,
\end_layout

\begin_layout Itemize
an uncontrollable transition relation 
\begin_inset Formula $\delta_{u}:S\rightarrow2^{S}$
\end_inset

.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
The 
\emph on
controllable predecessor
\emph default
 operator 
\begin_inset Formula $Cpre:\,2^{S}\rightarrow2^{S}$
\end_inset

 returns the set of states from which the system can force the game into
 a given region of the state space in one step:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
Cpre(X)=Cpre_{c}(X)\,\cup\, Cpre_{u}(X)
\]

\end_inset

where
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
Cpre_{c}(X)=\{s\in S\mid\exists l\in L.\forall s'\in\delta_{u}^{*}(s).\,\delta_{c}(s',l)\cap X\neq\emptyset\},
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
Cpre_{u}(X)=\{s\in S\mid\delta_{u}(s)\neq\emptyset\land\delta_{u}(s)\subseteq X\}
\]

\end_inset


\end_layout

\begin_layout Subsection
Abstractions of games
\begin_inset CommandInset label
LatexCommand label
name "sub:Abstractions-of-games"

\end_inset


\end_layout

\begin_layout Standard
An abstraction 
\begin_inset Formula $\Gamma=\langle\Sigma,\Lambda\rangle$
\end_inset

 of a game 
\begin_inset Formula $G=\langle S,L,I,\delta_{c},\delta_{u}\rangle$
\end_inset

consists of 
\end_layout

\begin_layout Itemize
a finite set of abstract states 
\begin_inset Formula $\Sigma$
\end_inset

 and a mapping 
\begin_inset Formula $\|.\|_{\Sigma}:\Sigma\rightarrow2^{S}$
\end_inset

 from abstract states to sets of concrete states, such that
\begin_inset Formula $\bigcup_{v_{i}\in\Sigma}\|v_{i}\|_{\Sigma}=S$
\end_inset

, and 
\begin_inset Formula $\forall v_{i},v_{j}\in\Sigma.\,(\|v_{i}\|_{\Sigma}\cap\|v_{j}\|_{\Sigma}=\emptyset)\lor(\|v_{i}\|_{\Sigma}=\|v_{j}\|_{\Sigma})$
\end_inset

.
\end_layout

\begin_layout Itemize
a finite set of extended abstract states (state+label) 
\begin_inset Formula $\Lambda$
\end_inset

 and a mapping 
\begin_inset Formula $\|.\|_{\Lambda}:\Lambda\rightarrow2^{S\times L}$
\end_inset

, such that 
\begin_inset Formula $\bigcup_{a_{i}\in\Lambda}\|a_{i}\|_{\Lambda}=S\times L$
\end_inset

 and 
\begin_inset Formula $\forall a_{i},a_{j}\in\Sigma.\,(\|a_{i}\|_{\Lambda}\cap\|a_{j}\|_{\Lambda}=\emptyset)\lor(\|a_{i}\|_{\Lambda}=\|a_{j}\|_{\Lambda})$
\end_inset

.
 Extended abstract states must agree with abstract states: 
\begin_inset Formula $\forall a\in\Lambda.\exists v\in\Sigma.\forall(s,l)\in\|a\|_{\Lambda}.\, s\in\|v\|_{\Sigma}$
\end_inset

.
 We write 
\begin_inset Formula $proj(a)=v$
\end_inset

 for a projection of an extended abstract state on the abstract state space.
\end_layout

\begin_layout Standard
We define may and must versions of abstract transition relations:
\end_layout

\begin_layout Itemize
\begin_inset Formula $\Delta_{c}^{m},\Delta_{c}^{M}:\Lambda\rightarrow2^{\Sigma}$
\end_inset

 are the may and must versions of the controllable transition relation
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\Delta_{c}^{m}(a)=\{v'\in\Sigma\mid\exists(s,l)\in\|a\|.\,\delta_{c}(s,l)\cap\|v'\|\neq\emptyset\}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\Delta_{c}^{M}(a)=\{v'\in\Sigma\mid\forall(s,l)\in\|a\|.\,\delta_{c}(s,l)\cap\|v'\|\neq\emptyset\}
\]

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\Delta_{u}^{m},\Delta_{u}^{M}:\Sigma\rightarrow2^{\Sigma}$
\end_inset

 are the may and must versions of the uncontrollable transition relation
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\Delta_{u}^{m}(v)=\{v'\in\Sigma\mid\exists s\in\|v\|.\,\delta_{u}(s)\cap\|v'\|\neq\emptyset\}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\Delta_{u}^{M}(v)=\{v'\in\Sigma\mid\forall s\in\|v\|.\,\delta_{u}(s)\cap\|v'\|\neq\emptyset\}
\]

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\gamma_{u}^{m},\gamma_{u}^{M}:\Lambda\rightarrow2^{\Lambda}$
\end_inset

 are the may and must versions of the extended uncontrollable transition
 relation
\begin_inset Formula 
\[
\gamma_{u}^{m}(a)=\{a'\in\Lambda\mid\exists(s,l)\in\|a\|.\exists s'\in\delta_{u}(s).\,(s',l)\in\|a'\|\}
\]

\end_inset


\begin_inset Formula 
\[
\gamma_{u}^{M}(a)=\{a'\in\Lambda\mid\forall(s,l)\in\|a\|.\exists s'\in\delta_{u}(s).\,(s',l)\in\|a'\|\}
\]

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $Avl:\Sigma\rightarrow2^{2^{\Lambda}}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
Avl(v)=\{\alpha\subseteq\Lambda\mid\forall s\in\|v\|.\exists l\in L,a\in\alpha.\,(s,l)\in\|a\|\}
\]

\end_inset


\end_layout

\begin_layout Standard
When using predicate abstraction, we further over and under-approximate
 these relations in order to be able to compute them efficiently:
\end_layout

\begin_layout Itemize
\begin_inset Formula $\Delta_{c}^{m+}\supseteq\Delta_{c}^{m}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\Delta_{c}^{M-}\subseteq\Delta_{c}^{M}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\Delta_{u}^{m+}\supseteq\Delta_{u}^{m}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\Delta_{u}^{M-}\subseteq\Delta_{u}^{M}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\gamma_{u}^{m+}\supseteq\gamma_{u}^{m}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\gamma_{u}^{M-}\subseteq\gamma_{u}^{M}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $Avl^{-}\subseteq Avl$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $Avl^{+}\supseteq Avl^{-}$
\end_inset

 Note that we do not require that 
\begin_inset Formula $Avl^{+}\supseteq Avl$
\end_inset

, as there may be no efficient way to compute such 
\begin_inset Formula $Avl^{+}$
\end_inset

.
 Instead, we require that 
\begin_inset Formula $\forall\alpha\in Avl.\exists\beta\in Avl^{+},\alpha\subseteq\beta$
\end_inset

.
\end_layout

\begin_layout Standard
Using these abstract transition relations, we can define an over-approximation
 
\begin_inset Formula $Cpre^{m}:\,2^{\Sigma}\mapsto2^{\Sigma}$
\end_inset

 and an under-approximation 
\begin_inset Formula $Cpre^{M}:\,2^{\Sigma}\mapsto2^{\Sigma}$
\end_inset

 of the controllable predecessor operator:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
Cpre^{m}(U)=Cpre_{c}^{m}(U)\,\cup\, Cpre_{u}^{m}(U)
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
Cpre^{M}(U)=Cpre_{c}^{M}(U)\,\cup\, Cpre_{u}^{M}(U)
\]

\end_inset

where
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
Cpre_{c}^{m}(U)=\{v\in\Sigma\mid\exists\alpha\in Avl^{+}(v).\exists a\in\alpha.\,\forall a'\in(\gamma_{u}^{M-})^{*}(a).\Delta_{c}^{m+}(a')\cap U\neq\emptyset\}\label{eq:cprecm}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
Cpre_{c}^{M}(U)=\{v\in\Sigma\mid\exists\alpha\in Avl^{-}(v).\forall a\in\alpha.\,\forall a'\in(\gamma_{u}^{m+})^{*}(a).\Delta_{c}^{M-}(a')\cap U\neq\emptyset\}\label{eq:cprecM}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
Cpre_{u}^{m}(U)=\{v\in\Sigma\mid\Delta_{u}^{M-}(v)\neq\emptyset\land\Delta_{u}^{M-}(v)\subseteq U\}\,\cup\,\{v\in\Sigma\mid\Delta_{u}^{M-}(v)=\emptyset\land\Delta_{u}^{m+}(v)\cap U\neq\emptyset\}\label{eq:cpreum}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
Cpre_{u}^{M}(U)=\{v\in\Sigma\mid\Delta_{u}^{m+}(v)\neq\emptyset\land\Delta_{u}^{m+}(v)\subseteq U\}\label{eq:cpreuM}
\end{equation}

\end_inset


\end_layout

\begin_layout Section
Abstraction refinement
\end_layout

\begin_layout Standard
In case there exists a may-winning strategy, but no must-winning strategy,
 we refine an abstract state on the may-must boundary.
 Such a state must satisfy one of two conditions:
\end_layout

\begin_layout Itemize
Case 1: 
\begin_inset Formula $v\in(W^{m}\setminus W^{M})\,\cap\, Cpre_{c}^{m}(W^{M})$
\end_inset


\end_layout

\begin_layout Itemize
Case 2: 
\begin_inset Formula $v\in(W^{m}\setminus W^{M})\,\cap\, Cpre_{u}^{m}(W^{M})$
\end_inset


\end_layout

\begin_layout Standard
Consider case 1.
 We have 
\begin_inset Formula $v\in Cpre_{c}^{m}(W^{M})$
\end_inset

 and 
\begin_inset Formula $v\notin Cpre_{c}^{M}(W^{M})$
\end_inset

.
 According to 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:cprecm"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:cprecM"

\end_inset

, 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $\exists\alpha\in Avl^{+}(v).\exists a\in\alpha.\,\forall a'\in(\gamma_{u}^{M-})^{*}(a).\Delta_{c}^{m+}(a')\cap W^{M}\neq\emptyset$
\end_inset

, but 
\begin_inset Formula $\forall\alpha\in Avl^{-}(v).\exists a\in\alpha.\exists a'\in(\gamma_{u}^{m+})^{*}(a).\Delta_{c}^{M-}(a')\cap W^{M}=\emptyset$
\end_inset

.
 We choose a 
\family default
\series default
\shape default
\size default
\emph on
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit
minimal
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
 
\begin_inset Formula $\alpha$
\end_inset

 that satisfies the first equation, i.e.
 
\begin_inset Formula $\nexists\alpha'\in Avl^{+}(v).\alpha'\subset\alpha$
\end_inset

.
 
\end_layout

\begin_layout Itemize
Case 1.1: 
\begin_inset Formula $\alpha\notin Avl^{-}(v)$
\end_inset

 
\end_layout

\begin_deeper
\begin_layout Itemize
Case 1.1.1: 
\begin_inset Formula $\alpha\in Avl(v)$
\end_inset

.
 We refine 
\begin_inset Formula $Avl^{-}$
\end_inset

: 
\begin_inset Formula $Avl^{-}(v)\colon=Avl^{-}(v)\cup\{\alpha\}$
\end_inset

.
\end_layout

\begin_layout Itemize
Case 1.1.2:
\begin_inset Formula $\alpha\notin Avl(v)$
\end_inset

.
 We refine 
\begin_inset Formula $Avl^{+}$
\end_inset

: 
\begin_inset Formula $Avl^{-}(v):=Avl^{-}(v)\setminus\{\alpha\}$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Itemize
Case 1.2: 
\begin_inset Formula $\alpha\in Avl^{-}(v)$
\end_inset

.
 Partition 
\begin_inset Formula $\alpha$
\end_inset

 into may-winning states 
\begin_inset Formula $\hat{\alpha}=\{a\in\alpha|\forall a'\in(\gamma_{u}^{M-})^{*}(a).\Delta_{c}^{m+}(a')\cap W^{M}\neq\emptyset\}$
\end_inset

 and 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
may-losing states 
\begin_inset Formula $\check{\alpha}=\alpha\setminus\hat{\alpha}$
\end_inset

.
\end_layout

\begin_deeper
\begin_layout Itemize
Case 1.2.1: 
\begin_inset Formula $\check{\alpha}\neq\emptyset$
\end_inset

.
 Refine 
\begin_inset Formula $v$
\end_inset

 by partitioning it into 2 or more states 
\begin_inset Formula $\{v_{1},\ldots,v_{k}\}$
\end_inset

 such that 
\begin_inset Formula $\exists\alpha'\in Avl(v_{1}).\,\alpha'\subseteq\hat{\alpha}$
\end_inset


\end_layout

\begin_layout Itemize
Case 1.2.2: 
\begin_inset Formula $\check{\alpha}=\emptyset$
\end_inset

, i.e., all extended abstract states in 
\begin_inset Formula $\alpha$
\end_inset

 are may-winning; however 
\begin_inset Formula $\alpha$
\end_inset

 is not must-winning, i.e., 
\begin_inset Formula $\exists a\in\alpha.\exists a'\in(\gamma_{u}^{m+})^{*}(a).\Delta_{c}^{M-}(a')\cap W^{M}=\emptyset$
\end_inset

.
\end_layout

\begin_deeper
\begin_layout Itemize
Case 1.2.2.1: 
\begin_inset Formula $a'\notin(\gamma_{u}^{M-})^{*}(a)$
\end_inset

.
 In this case there exists extended abstract state 
\begin_inset Formula $b\in(\gamma_{u}^{M-})^{*}(a)$
\end_inset

 such that 
\begin_inset Formula $a'\in\gamma_{u}^{m+}(b)$
\end_inset

 (Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:maymust"

\end_inset

).
 We partition 
\begin_inset Formula $b$
\end_inset

 into 
\begin_inset Formula $\hat{b}$
\end_inset

 and 
\begin_inset Formula $\check{b}$
\end_inset

 such that 
\begin_inset Formula $\|\hat{b}\|=\{(s,l)\in\|w\|\mid\exists s'\in\delta_{u}(s).\,(s',l)\in\|a'\|\}$
\end_inset

 and 
\begin_inset Formula $\|\check{b}\|=\|b\|\setminus\|\hat{b}\|$
\end_inset

.
\end_layout

\begin_deeper
\begin_layout Itemize
Case 1.2.2.1.1: 
\begin_inset Formula $\hat{b}=\emptyset$
\end_inset

.
 We eliminate the spurious transition 
\begin_inset Formula $b\rightarrow a'$
\end_inset

 from 
\begin_inset Formula $\gamma_{u}^{m+}$
\end_inset


\end_layout

\begin_layout Itemize
Case 1.2.2.1.2: 
\begin_inset Formula $\check{b}=\emptyset$
\end_inset

.
 We add the missing transition 
\begin_inset Formula $b\rightarrow a'$
\end_inset

 to 
\begin_inset Formula $\gamma_{u}^{M-}$
\end_inset

.
 
\end_layout

\begin_layout Itemize
Case 1.2.2.1.3: Otherwise, we replace extended abstract state 
\begin_inset Formula $b$
\end_inset

 with the pair of abstract states 
\begin_inset Formula $\hat{b}$
\end_inset

 and 
\begin_inset Formula $\check{b}$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Itemize
Case 1.2.2.2: 
\begin_inset Formula $a'\in(\gamma_{u}^{M-})^{*}(a)$
\end_inset

.
 We pick a state 
\begin_inset Formula $w\in\Delta_{c}^{m+}(a')\cap W^{M}$
\end_inset

 and partition 
\begin_inset Formula $a'$
\end_inset

 into 
\begin_inset Formula $\hat{a}'=\{(s,l)\in\|a'\|\mid\delta_{c}(s,l)\cap\|w\|\neq\emptyset\}$
\end_inset

 and 
\begin_inset Formula $\check{a}'=a'\setminus\hat{a}'$
\end_inset

.
\end_layout

\begin_deeper
\begin_layout Itemize
If 
\begin_inset Formula $\hat{a}'=\emptyset$
\end_inset

, then we eliminate the spurious controllable transition 
\begin_inset Formula $a'\rightarrow w$
\end_inset

 from
\begin_inset Formula $\Delta_{c}^{m+}$
\end_inset

.
\end_layout

\begin_layout Itemize
If 
\begin_inset Formula $\check{a}'=\emptyset$
\end_inset

, then we add transition 
\begin_inset Formula $a'\rightarrow w$
\end_inset

 to 
\begin_inset Formula $\Delta_{c}^{M-}$
\end_inset

.
\end_layout

\begin_layout Itemize
Otherwise, we replace extended abstract state 
\begin_inset Formula $a'$
\end_inset

 with the pair of extended abstract states 
\begin_inset Formula $\hat{a}'$
\end_inset

 and 
\begin_inset Formula $\check{a}'$
\end_inset

.
\end_layout

\end_deeper
\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename maymust.eps

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:maymust"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Consider case 2.
 We have 
\begin_inset Formula $v\in Cpre_{u}^{m}(W^{M})$
\end_inset

 and 
\begin_inset Formula $v\notin Cpre_{c}^{M}(W^{M})$
\end_inset

.
 According to the negation of 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:cpreuM"

\end_inset

, there exists 
\begin_inset Formula $z\in\Delta_{u}^{m+}(v)$
\end_inset

, 
\begin_inset Formula $z\notin W^{M}$
\end_inset

.
 We partition 
\begin_inset Formula $v$
\end_inset

 into 
\begin_inset Formula $\hat{v}$
\end_inset

 and 
\begin_inset Formula $\check{v}$
\end_inset

, such that 
\begin_inset Formula $\|\hat{v}\|=\{s\in\|v\|\mid\exists s'\in\delta_{u}(s).\, s'\in\|z\|\}$
\end_inset

 and 
\begin_inset Formula $\|\check{v}\|=\|v\|\setminus\|\hat{v}\|$
\end_inset

.
\end_layout

\begin_layout Itemize
Case 2.1: 
\begin_inset Formula $\|\hat{v}\|=\emptyset$
\end_inset

.
 We eliminate spurious transition 
\begin_inset Formula $v\rightarrow z$
\end_inset

 from 
\begin_inset Formula $\Delta_{u}^{m+}$
\end_inset


\end_layout

\begin_layout Itemize
Case 2.2: 
\begin_inset Formula $\|\check{v}\|=\emptyset$
\end_inset

.
 We add transition 
\begin_inset Formula $v\rightarrow z$
\end_inset

 to 
\begin_inset Formula $\Delta_{u}^{M-}$
\end_inset


\end_layout

\begin_layout Itemize
Case 2.3: Otherwise, we replace abstract state 
\begin_inset Formula $v$
\end_inset

 with the pair of states 
\begin_inset Formula $\hat{v}$
\end_inset

 and 
\begin_inset Formula $\check{v}$
\end_inset

.
\end_layout

\begin_layout Section
Symbolic games
\end_layout

\begin_layout Standard
Symbolic games are defined over variables and expressions in some theory,
 e.g., integer linear arithmetic or bitvectors.
 
\end_layout

\begin_layout Itemize
Given a variable 
\begin_inset Formula $z$
\end_inset

 in the theory, we denote 
\begin_inset Formula $D(z)$
\end_inset

 the domain of 
\begin_inset Formula $z$
\end_inset

.
 
\end_layout

\begin_layout Standard
Given a set of variables 
\begin_inset Formula $Z$
\end_inset

:
\end_layout

\begin_layout Itemize
\begin_inset Formula $D(Z)=\prod_{z\in Z}D(z)$
\end_inset

 is the cartesian product of individual variable domains
\end_layout

\begin_layout Itemize
\begin_inset Formula $Arith(Z)$
\end_inset

 is the set of arithmetic expressions over variables in 
\begin_inset Formula $Z$
\end_inset

 allowed by the theory.
 For example, in the theory of integer linear arithmetic 
\begin_inset Formula $Arith(Z)$
\end_inset

 consist of linear combinations of variables in 
\begin_inset Formula $Z$
\end_inset

.
\end_layout

\begin_layout Itemize
\begin_inset Formula $Rel(Z)$
\end_inset

 is the set of 
\emph on
relational expressions
\emph default
, which consist of arithmetic expressions connected by relational operators
 of the theory, e.g.
\begin_inset Formula $=$
\end_inset

, 
\begin_inset Formula $\neq$
\end_inset

, 
\begin_inset Formula $<$
\end_inset

, 
\begin_inset Formula $\leq$
\end_inset

, 
\begin_inset Formula $>$
\end_inset

, 
\begin_inset Formula $\geq$
\end_inset

, 
\begin_inset Formula $\equiv$
\end_inset

, etc.
 
\end_layout

\begin_layout Itemize
\begin_inset Formula $Prop(X)$
\end_inset


\emph on
 
\emph default
is the set of 
\emph on
propositional expressions 
\emph default
constructed out of expressions in 
\begin_inset Formula $Rel(Z)$
\end_inset

 using boolean operators 
\begin_inset Formula $\land$
\end_inset

, 
\begin_inset Formula $\lor$
\end_inset

, and 
\begin_inset Formula $\lnot$
\end_inset

.
\end_layout

\begin_layout Standard
A 
\emph on
symbolic game structure
\emph default
 
\begin_inset Formula $SG=\langle X,Y,T,init,ctran,utran\rangle$
\end_inset

 consist of 
\end_layout

\begin_layout Itemize
Finite set of 
\emph on
state variables
\emph default
 
\begin_inset Formula $X$
\end_inset

.
 The set of corresponding 
\emph on
next-state variables
\emph default
 is denoted 
\begin_inset Formula $X'$
\end_inset

.
\end_layout

\begin_layout Itemize
Finite set of 
\emph on
controllable label variables
\emph default
 
\begin_inset Formula $Y$
\end_inset

.
\end_layout

\begin_layout Itemize
Finite set of 
\emph on
temporary variable
\emph default
 
\begin_inset Formula $T$
\end_inset


\end_layout

\begin_layout Itemize
Initial state constraint 
\begin_inset Formula $init\in Prop(X)$
\end_inset

.
\end_layout

\begin_layout Itemize
A set of 
\emph on
controllable syntactic transitions
\emph default
 
\begin_inset Formula $ctran\subset Tran(X,Y,T)$
\end_inset

 and a set of 
\emph on
uncontrollable syntactic transitions
\emph default
 
\begin_inset Formula $utran\subset Tran(X,\emptyset,T)$
\end_inset

.
 
\begin_inset Formula $Tran(X,Y,T)$
\end_inset

 is the set of syntactic transitions over state variables 
\begin_inset Formula $X$
\end_inset

, controllable lable variables 
\begin_inset Formula $Y$
\end_inset

, and temporary variables 
\begin_inset Formula $T$
\end_inset

.
 A syntactic transition is a loop-free structured program constructed out
 of assignments and assume statements combined into sequential and or-blocks:
 
\begin_inset Formula 
\[
tran:\,\,(x:=e)\mid assume(p)\mid or(tran*)\mid seq(tran*)
\]

\end_inset

where
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $x\in X'\cup T$
\end_inset

, 
\begin_inset Formula $e\in Arith(X\cup Y\cup T\cup X')$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $p\in Prop(X\cup Y\cup T\cup X')$
\end_inset


\end_layout

\begin_layout Itemize
variable 
\begin_inset Formula $x\in X'\cup T$
\end_inset

 can occur at most once in the left-hand side of an assignment statement
 in the transition
\end_layout

\begin_layout Itemize
a variable 
\begin_inset Formula $x\in X'\cup T$
\end_inset

 can be assigned at most once in every path through the transition.
 If 
\begin_inset Formula $x$
\end_inset

 is assigned in one path, it must be assigned in all paths.
\end_layout

\begin_layout Itemize
if a variable 
\begin_inset Formula $x\in X'\cup T$
\end_inset

 occurs in the left-hand side of an assignment, it can only be used in the
 right-hand side of an assignment or in an assume-statement following the
 location where it is assigned.
\end_layout

\begin_layout Standard
A syntactic transition can be converted to an equivalent propositional formula
 using function 
\begin_inset Formula $P:Tran(X,Y,T)\rightarrow Prop(X\cup Y\cup T\cup X')$
\end_inset

 defined as follows:
\end_layout

\begin_layout Itemize
\begin_inset Formula $P((x:=e))=(x=e)$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $P(assume(p))=p$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $P(seq(s_{1},\ldots,s_{k}))=\bigwedge_{1\leq i\leq k}P(s_{i})$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $P(or(s_{1},\ldots,s_{k}))=\bigvee_{1\leq i\leq k}P(s_{i})$
\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Note Comment
status collapsed

\begin_layout Plain Layout
Finite set of 
\emph on
temporary variables
\emph default
 
\begin_inset Formula $T$
\end_inset

.
 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Given a symbolic game structure 
\begin_inset Formula $SG=\langle X,Y,T,init,ctran,utran\rangle$
\end_inset

 we define the corresponding game structure 
\begin_inset Formula $G(SG)$
\end_inset

 as follows 
\begin_inset Formula 
\[
G(SG)=\langle D(X),D(Y),\|init\|_{p},\bigcup_{t\in ctran}\|t\|_{c},\bigcup_{t\in utran}\|t\|_{u}\rangle
\]

\end_inset


\end_layout

\begin_layout Standard
where
\end_layout

\begin_layout Itemize
\begin_inset Formula $\|.\|_{p}:Prop(Z)\rightarrow2^{D(Z)}$
\end_inset

.
 
\begin_inset Formula $\|exp\|=\{v\in D(Z)\mid v\models exp\}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\|.\|_{c}:Tran(X,Y,T)\rightarrow(D(X)\times D(Y)\rightarrow2^{D(X)})$
\end_inset

.
 
\begin_inset Formula $\|t\|_{c}(s,l)=\{s'\in D(X')\mid\exists t\in D(T).\,(s,l,t,s')\models P(t)\}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\|.\|_{u}:Tran(X,\emptyset,T)\rightarrow(D(X)\rightarrow2^{D(X)})$
\end_inset

.
 
\begin_inset Formula $\|t\|_{u}(s)=\{s'\in D(X')\mid\exists t\in D(T).\,(s,t,s')\models P(t)\}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Comment
status collapsed

\begin_layout Plain Layout
Controllable syntactic transitions must be deterministic with respect to
 state and label variables: 
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Abstraction
\end_layout

\begin_layout Standard
Given a symbolic game structure 
\begin_inset Formula $SG=\langle X,Y,T,init,ctran,utran\rangle$
\end_inset

, we define abstraction 
\begin_inset Formula $\Gamma(SG,\Pi,\Theta)$
\end_inset

 of 
\begin_inset Formula $G(SG)$
\end_inset

 with respect to two finite sets of predicates:
\end_layout

\begin_layout Itemize

\emph on
state predicates
\emph default
 
\begin_inset Formula $\Pi=\{\pi_{1},\ldots,\pi_{k}\}$
\end_inset

, 
\begin_inset Formula $\pi_{i}\in Rel(X)$
\end_inset


\end_layout

\begin_layout Itemize

\emph on
label predicates
\emph default
 
\begin_inset Formula $\Theta=\{\theta_{1},\ldots,\theta_{m}\}$
\end_inset

, 
\begin_inset Formula $\theta_{i}\in Rel(X\cup Y)$
\end_inset


\end_layout

\begin_layout Standard
as follows: 
\begin_inset Formula $\Gamma(SG,\Pi,\Theta)=\langle\mathbb{B}^{k},\mathbb{B}^{k+m}\rangle$
\end_inset

, where 
\begin_inset Formula $\mathbb{B}^{k}$
\end_inset

 is the set of abstract states, and 
\begin_inset Formula $\mathbb{B}^{k+m}$
\end_inset

 is the set of extended abstract states, with
\end_layout

\begin_layout Itemize
\begin_inset Formula $\|(b_{1},\ldots,b_{k})\|_{\Sigma}=\{s\in D(X)\mid\bigwedge_{i\in[1\ldots k]}\pi_{i}(s)=b_{i}\}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\|(b_{1},\ldots,b_{k+m})\|_{\Lambda}=\{a\in D(X\cup Y_{c})\mid(\bigwedge_{i\in[1\ldots k]}\pi_{i}(a)=b_{i})\land(\bigwedge_{i\in[1\ldots m]}\theta_{i}(a)=b_{k+1})\}$
\end_inset


\end_layout

\begin_layout Standard
Given an abstraction of a game structure induced by a set of predicates,
 one can in principle compute may and must relations defined in Section
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Abstractions-of-games"

\end_inset

 (
\begin_inset Formula $\Delta_{c}^{m}$
\end_inset

, 
\begin_inset Formula $\Delta_{c}^{M}$
\end_inset

, 
\begin_inset Formula $\Delta_{u}^{m}$
\end_inset

, 
\begin_inset Formula $\Delta_{u}^{M}$
\end_inset

, 
\begin_inset Formula $\gamma_{u}^{m}$
\end_inset

, 
\begin_inset Formula $\gamma_{c}^{M}$
\end_inset

, 
\begin_inset Formula $Avl$
\end_inset

); however doing so may be computationally hard for complex specifications
 and for a large number of predicates.
 Therefore, we compute and refine approximate versions of these relations
 instead.
 We introduce two sources of imprecision.
 First, we decompose complex syntactic transitions into simpler ones that
 are abstracted and refined individually.
 The granularity of decomposition can vary and will be selected experimentally.
 Some possible choices include abstracting away individual statements, basic
 blocks, groups of basic blocks, etc.
 We introduce additional 
\emph on
temporary predicates.
\end_layout

\begin_layout Standard
Computing initial abstraction
\end_layout

\begin_layout Itemize
Given a syntactic transition 
\begin_inset Formula $tran\in Tran(Z,V,W)$
\end_inset

, which can be part of another transition, Abstraction of a transition wrt
 pre- and post-predicates
\end_layout

\begin_layout Itemize
Adding spurious/missing transition
\end_layout

\begin_layout Itemize
Adding pre-/post-predicate
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Identifying transition segments.
\end_layout

\begin_layout Plain Layout
Non-blocking assignments
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Refinement
\end_layout

\begin_layout Standard
\begin_inset CommandInset citation
LatexCommand cite
key "deAlfaro_Roy_07"

\end_inset


\end_layout

\end_body
\end_document
